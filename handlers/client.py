# –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
from create_bot import bot, db, rcon
from utilities import imagemaps
from utilities.formatter import user_data
from utilities.logger import logger
from utilities.other import admin_mailing, image_to_server

# Python –º–æ–¥—É–ª–∏
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ContentTypes
from aiogram.dispatcher.filters.state import State, StatesGroup

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
keyboard_sub = InlineKeyboardMarkup()
keyboard_sub.row(
	InlineKeyboardButton(text='–°—Ç–∞—Ç—É—Å üîé', callback_data='server_status'),
	InlineKeyboardButton(text='–ü—Ä–æ–±–ª–µ–º–∞ ‚ùì', callback_data='issue'),
)
keyboard_sub.row(
	InlineKeyboardButton(text='–ö–∞—Ä—Ç–∏–Ω–∫–∏ üñºÔ∏è', callback_data='imagemaps'),
	InlineKeyboardButton(text='–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å üí∏', callback_data='donate')
)

keyboard_unsub = InlineKeyboardMarkup()
keyboard_unsub.row(
	InlineKeyboardButton(text='–°—Ç–∞—Ç—É—Å üîé', callback_data='server_status'),
	InlineKeyboardButton(text='–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å üí∏', callback_data='donate')
)

keyboard_register = InlineKeyboardMarkup()
keyboard_register.row(InlineKeyboardButton(text='–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è ‚öíÔ∏è', callback_data='register'))

keyboard_menu = InlineKeyboardMarkup()
keyboard_menu.row(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='menu'))


# –ö–ª–∞—Å—Å—ã
class FSMRegister(StatesGroup):
	first_message = State()
	nickname = State()


class FSMIssue(StatesGroup):
	first_message = State()
	issue = State()


class FSMImagemaps(StatesGroup):
	first_message = State()
	name = State()
	format = State()


# –§—É–Ω–∫—Ü–∏–∏
async def message_start(message: types.Message):
	try:
		await message.delete()

		data = await user_data(user_id=message.from_user.id)

		if data['approval'] == 'yes':
			text = '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —É –≤–∞—Å –∫—É—á–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π ‚¨áÔ∏è'
			reply_markup = keyboard_sub
		elif data['approval'] == 'not':
			text = (
				'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏, –æ–∂–∏–¥–∞–π—Ç–µ\n'
				'–ü–æ–∫–∞ —á—Ç–æ –º–æ–∂–µ—Ç–µ –≥–ª—è–Ω—É—Ç—å, –∫–∞–∫ —Ç–∞–º –¥–µ–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–º ‚¨áÔ∏è'
			)
			reply_markup = keyboard_unsub
		elif data['approval'] == 'ban':
			text = (
				'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n'
				'–í—ã –º–æ–∂–µ—Ç–µ –∫—É–¥–∞-—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É..'
			)
			reply_markup = None
		else:
			text = (
				'–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –°–µ—Ä–≤–µ—Ä53\n'
				'–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è'
			)
			reply_markup = keyboard_register

		await message.answer(
			text=text,
			reply_markup=reply_markup
		)

		logger.info(f'USER={message.from_user.id}, MESSAGE="approval={data["approval"]}"')
	except Exception as e:
		logger.error(f'USER={message.from_user.id}, MESSAGE="{e}"')


async def callback_cancel(query: types.CallbackQuery, state: FSMContext):
	try:
		await query.answer()

		await state.finish()

		data = await user_data(user_id=query.from_user.id)

		if data['approval'] == 'yes':
			text = '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —É –≤–∞—Å –∫—É—á–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π ‚¨áÔ∏è'
			reply_markup = keyboard_sub
		elif data['approval'] == 'not':
			text = (
				'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏, –æ–∂–∏–¥–∞–π—Ç–µ\n'
				'–ü–æ–∫–∞ —á—Ç–æ –º–æ–∂–µ—Ç–µ –≥–ª—è–Ω—É—Ç—å, –∫–∞–∫ —Ç–∞–º –¥–µ–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–º ‚¨áÔ∏è'
			)
			reply_markup = keyboard_unsub
		elif data['approval'] == 'ban':
			text = (
				'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n'
				'–í—ã –º–æ–∂–µ—Ç–µ –∫—É–¥–∞-—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É..'
			)
			reply_markup = None
		else:
			text = (
				'–ß—Ç–æ–∂, —è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –°–µ—Ä–≤–µ—Ä53\n'
				'–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è'
			)
			reply_markup = keyboard_register

		await query.message.edit_text(
			text=text,
			reply_markup=reply_markup
		)

		logger.info(f'USER={query.from_user.id}, MESSAGE=""')
	except Exception as e:
		logger.error(f'USER={query.from_user.id}, MESSAGE="{e}"')


async def callback_register(query: types.CallbackQuery, state: FSMContext):
	try:
		await query.answer()

		data = await user_data(user_id=query.from_user.id)

		if data['approval'] == '':
			text = '–í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –∏–∑ –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç–∞:'

			await state.update_data(first_message=query.message.message_id)
			await FSMRegister.nickname.set()
		else:
			text = '–ö–∞–∂–µ—Ç—Å—è, –≤–∞–º –Ω–µ —Å—é–¥–∞.'

		await query.message.edit_text(
			text=text,
			reply_markup=keyboard_menu
		)

		logger.info(f'USER={query.from_user.id}, MESSAGE=""')
	except Exception as e:
		logger.error(f'USER={query.from_user.id}, MESSAGE="{e}"')


async def message_register_nickname(message: types.Message, state: FSMContext):
	try:
		data = await state.get_data()
		await state.finish()

		await db.add(
			user_id=message.from_user.id,
			nickname=message.text
		)

		user = await user_data(
			user_id=message.from_user.id,
			formatted=True
		)

		reply_markup = InlineKeyboardMarkup()
		reply_markup.row(
			InlineKeyboardButton(text='–ü—Ä–∏–Ω—è—Ç—å ‚úÖ', callback_data=f'register_accept_{message.from_user.id}'),
			InlineKeyboardButton(text='–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå', callback_data=f'register_reject_{message.from_user.id}')
		)

		await admin_mailing(
			text=(
				'‚ùó‚ùó –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n\n'
				f'{user}'
			),
			reply_markup=reply_markup
		)

		await message.delete()
		await bot.edit_message_text(
			chat_id=message.from_user.id,
			message_id=data['first_message'],
			text=f'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å –Ω–∏–∫–Ω–µ–π–º–æ–º "{message.text}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º üîç',
			reply_markup=keyboard_menu
		)

		logger.info(f'USER={message.from_user.id}, MESSAGE="nickname={message.text}"')
	except Exception as e:
		logger.error(f'USER={message.from_user.id}, MESSAGE="{e}"')


async def callback_server_status(query: types.CallbackQuery):
	try:
		await query.answer()

		status = await rcon.client_status()

		logger.debug(f'USER={query.from_user.id}, MESSAGE="status={status}"')

		data = await user_data(user_id=query.from_user.id)

		if data['approval'] == 'yes':
			text = (
				'–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ <b>mc.server53.ru</b>:\n'
				f'‚Ä¢ TPS: {status[0]}\n'
				f'‚Ä¢ –ß–∏—Å–ª–æ –∏–≥—Ä–æ–∫–æ–≤: {status[1]}\n'
				f'‚Ä¢ –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤: {status[2]}'
			)
		elif data['approval'] == 'not':
			text = (
				'–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ <b>mc.server53.ru</b>:\n'
				f'‚Ä¢ TPS: {status[0]}\n'
				f'‚Ä¢ –ß–∏—Å–ª–æ –∏–≥—Ä–æ–∫–æ–≤: {status[1]}'
			)
		else:
			text = '–ö–∞–∂–µ—Ç—Å—è, –≤–∞–º –Ω–µ —Å—é–¥–∞.'

		await query.message.edit_text(
			text=text,
			reply_markup=keyboard_menu
		)

		logger.info(f'USER={query.from_user.id}, MESSAGE=""')
	except Exception as e:
		logger.error(f'USER={query.from_user.id}, MESSAGE="{e}"')


async def callback_issue(query: types.CallbackQuery, state: FSMContext):
	try:
		await query.answer()

		data = await user_data(user_id=query.from_user.id)

		if data['approval'] == 'yes':
			text = '–û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É —Ç–µ–∫—Å—Ç–æ–º:'

			await state.update_data(first_message=query.message.message_id)
			await FSMIssue.issue.set()
		else:
			text = '–ö–∞–∂–µ—Ç—Å—è, –≤–∞–º –Ω–µ —Å—é–¥–∞.'

		await query.message.edit_text(
			text=text,
			reply_markup=keyboard_menu
		)

		logger.info(f'USER={query.from_user.id}, MESSAGE=""')
	except Exception as e:
		logger.error(f'USER={query.from_user.id}, MESSAGE="{e}"')


async def message_issue_text(message: types.Message, state: FSMContext):
	try:
		data = await state.get_data()
		await state.finish()

		user = await user_data(
			user_id=message.from_user.id,
			formatted=True
		)
		await admin_mailing(
			text=(
				'‚ùó‚ùó –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ\n\n'
				f'{user}\n\n'
				'–û–ø–∏—Å–∞–Ω–∏–µ:\n'
				f'{message.text}'
			)
		)

		await message.delete()
		await bot.edit_message_text(
			chat_id=message.from_user.id,
			message_id=data['first_message'],
			text=(
				'–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º üîç\n'
				'–í—ã –æ–ø–∏—Å–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º—É —Ç–∞–∫:\n'
				f'{message.text}'
			),
			reply_markup=keyboard_menu
		)

		logger.info(f'USER={message.from_user.id}, MESSAGE=""')
	except Exception as e:
		logger.error(f'USER={message.from_user.id}, MESSAGE="{e}"')


async def callback_donate(query: types.CallbackQuery):
	try:
		await query.answer()

		data = await user_data(user_id=query.from_user.id)

		if data['approval'] == 'yes' or 'not':
			text = (
				'–ú—ã –±—É–¥–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã, –µ—Å–ª–∏ –≤—ã –ø–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –Ω–∞—à –ø—Ä–æ–µ–∫—Ç!\n'
				'–ö—Ä–∏–ø—Ç–æ: BEP20(BSC) - USDT - 0x892fda42e19812bb01f8683caad0520c16ac2e0d\n'
				'–°–ë–ü: +79136610052'
			)
		else:
			text = '–ö–∞–∂–µ—Ç—Å—è, –≤–∞–º –Ω–µ —Å—é–¥–∞.'

		await query.message.edit_text(
			text=text,
			reply_markup=keyboard_menu
		)

		logger.info(f'USER={query.from_user.id}, MESSAGE=""')
	except Exception as e:
		logger.error(f'USER={query.from_user.id}, MESSAGE="{e}"')


async def callback_imagemaps(query: types.CallbackQuery, state: FSMContext):
	try:
		await query.answer()

		data = await user_data(user_id=query.from_user.id)

		if data['approval'] == 'yes':
			text = (
				'–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä üñºÔ∏è\n\n'
				'–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë —Å –ø–æ–¥–ø–∏—Å—å—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è.\n\n'
				'–õ—É—á—à–µ –≤—Å–µ–≥–æ –±—É–¥—É—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å —Ä–∞–∑–º–µ—Ä–æ–º –∫—Ä–∞—Ç–Ω—ã–º 128px.\n'
				'–ò –≤ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: 1:1, 1:2, 2:3 –∏ —Ç–ø.'
			)

			await state.update_data(first_message=query.message.message_id)
			await FSMImagemaps.name.set()
		else:
			text = '–ö–∞–∂–µ—Ç—Å—è, –≤–∞–º –Ω–µ —Å—é–¥–∞.'

		await query.message.edit_text(
			text=text,
			reply_markup=keyboard_menu
		)

		logger.info(f'USER={query.from_user.id}, MESSAGE=""')
	except Exception as e:
		logger.error(f'USER={query.from_user.id}, MESSAGE="{e}"')


async def message_imagemaps_file(message: types.Message, state: FSMContext):
	try:
		await message.delete()

		data = await state.get_data()

		if message.caption is not None:
			logger.debug(f'USER={message.from_user.id}, MESSAGE="name={message.caption}"')

			if message.content_type == 'photo':
				await message.photo[-1].download(destination_file=f'images\\{message.caption}.png')
			elif message.content_type == 'document':
				await message.document.download(destination_file=f'images\\{message.caption}.png')

			image_format = await imagemaps.image_format(name=message.caption)

			text = (
				f'–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫ {image_format[0]}:{image_format[1]}\n'
				f'–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã –≤ –±–ª–æ–∫–∞—Ö:'
			)

			reply_markup = InlineKeyboardMarkup()
			for i in range(1, 5):
				ratio_button = f'{image_format[0] * i}:{image_format[1] * i}'
				ratio_callback = f'{image_format[0] * i}_{image_format[1] * i}'
				reply_markup.insert(InlineKeyboardButton(text=f'{ratio_button}', callback_data=f'scale_{ratio_callback}'))
			reply_markup.insert(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='menu'))

			await state.update_data(name=message.caption)
			await FSMImagemaps.format.set()
		else:
			text = '–ü–æ–¥–ø–∏—à–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!'
			reply_markup = keyboard_menu

		await bot.edit_message_text(
			chat_id=message.from_user.id,
			message_id=data['first_message'],
			text=text,
			reply_markup=reply_markup
		)

		logger.info(f'USER={message.from_user.id}, MESSAGE=""')
	except Exception as e:
		logger.error(f'USER={message.from_user.id}, MESSAGE="{e}"')


async def callback_imagemaps_format(query: types.CallbackQuery, state: FSMContext):
	try:
		await query.answer()

		data = await state.get_data()
		name = data['name']
		ratio = [int(i) for i in query.data.split('_')[1:]]

		await imagemaps.image_scale(
			name=name,
			ratio=ratio
		)
		await image_to_server(image=name)

		await query.message.edit_text(
			text=f'–ö–∞—Ä—Ç–∞ "{name}" –≤ —Ä–∞–∑–º–µ—Ä–µ {ratio[0]}:{ratio[1]} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä ‚úÖ',
			reply_markup=keyboard_menu
		)

		await state.finish()

		logger.info(f'USER={query.from_user.id}, MESSAGE=""')
	except Exception as e:
		logger.error(f'USER={query.from_user.id}, MESSAGE="{e}"')


def register_handlers(dp: Dispatcher):
	dp.register_message_handler(message_start, commands=['start', 'help'])

	dp.register_callback_query_handler(callback_cancel, lambda x: x.data == 'menu', state='*')

	dp.register_callback_query_handler(callback_register, lambda x: x.data == 'register')
	dp.register_message_handler(message_register_nickname, state=FSMRegister.nickname)

	dp.register_callback_query_handler(callback_server_status, lambda x: x.data == 'server_status')

	dp.register_callback_query_handler(callback_issue, lambda x: x.data == 'issue')
	dp.register_message_handler(message_issue_text, lambda x: x.content_type == 'text', state=FSMIssue.issue)

	dp.register_callback_query_handler(callback_donate, lambda x: x.data == 'donate')

	dp.register_callback_query_handler(callback_imagemaps, lambda x: x.data == 'imagemaps')
	dp.register_message_handler(message_imagemaps_file, lambda x: x.content_type in ('photo', 'document'), state=FSMImagemaps.name)
	dp.register_callback_query_handler(
		callback_imagemaps_format,
		lambda x: x.data.startswith('scale_'),
		state=FSMImagemaps.format
	)
